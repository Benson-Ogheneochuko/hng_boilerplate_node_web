openapi: 3.0.0
info:
  title: User Management API
  version: 1.0.0
  description: API for managing users
servers:
  - url: "{baseUrl}/api/v1"
    description: API server
    variables:
      baseUrl:
        default: https://host-api-domain.com
        enum:
          - https://host-api-domain.com  # Production
          - https://staging.host-api-domain.com  # Staging
          - https://dev.host-api-domain.com  # Development
          - http://localhost:3000  # Local development
paths:
  /auth/signup:
    post:
      summary: Create a new user
      description: Add a new user to the system
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUser'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input
  /auth/login:
    post:
      summary: User login
      description: Logs in an existing user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginCredentials'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Invalid credentials
  /auth/forgot-password:
    post:
      summary: Request password reset
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
      responses:
        '200':
          description: Password reset email sent
  /auth/reset-password:
    post:
      summary: Reset password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
                - newPassword
              properties:
                token:
                  type: string
                newPassword:
                  type: string
                  format: password
      responses:
        '200':
          description: Password reset successful
  /auth/change-password:
    post:
      summary: Change password
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - currentPassword
                - newPassword
              properties:
                currentPassword:
                  type: string
                  format: password
                newPassword:
                  type: string
                  format: password
      responses:
        '200':
          description: Password changed successfully
  /invites:
    post:
      summary: Create an invite
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - role
              properties:
                email:
                  type: string
                  format: email
                role:
                  type: string
                  enum: [user, admin]
      responses:
        '201':
          description: Invite created successfully
  /invites/{inviteId}/accept:
    post:
      summary: Accept an invite
      parameters:
        - in: path
          name: inviteId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - password
              properties:
                password:
                  type: string
                  format: password
      responses:
        '200':
          description: Invite accepted successfully
  /organizations:
    post:
      summary: Create an organization
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Organization'
      responses:
        '201':
          description: Organization created successfully
    get:
      summary: List organizations
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
        - in: query
          name: search
          schema:
            type: string
      responses:
        '200':
          description: List of organizations
          content:
            application/json:
              schema:
                type: object
                properties:
                  organizations:
                    type: array
                    items:
                      $ref: '#/components/schemas/Organization'
                  totalCount:
                    type: integer
                  currentPage:
                    type: integer
                  totalPages:
                    type: integer
  /organizations/{orgId}:
    get:
      summary: Get an organization
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: orgId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Organization details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
    put:
      summary: Update an organization
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: orgId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Organization'
      responses:
        '200':
          description: Organization updated successfully
    delete:
      summary: Delete an organization
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: orgId
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Organization deleted successfully
  /email/send:
    post:
      summary: Send an email
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - to
                - subject
                - body
              properties:
                to:
                  type: string
                  format: email
                subject:
                  type: string
                body:
                  type: string
                template:
                  type: string
                templateData:
                  type: object
      responses:
        '200':
          description: Email sent successfully
  /activity-logs:
    get:
      summary: Get activity logs
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
        - in: query
          name: userId
          schema:
            type: string
        - in: query
          name: action
          schema:
            type: string
        - in: query
          name: startDate
          schema:
            type: string
            format: date
        - in: query
          name: endDate
          schema:
            type: string
            format: date
      responses:
        '200':
          description: List of activity logs
          content:
            application/json:
              schema:
                type: object
                properties:
                  logs:
                    type: array
                    items:
                      $ref: '#/components/schemas/ActivityLog'
                  totalCount:
                    type: integer
                  currentPage:
                    type: integer
                  totalPages:
                    type: integer
  /settings/language:
    put:
      summary: Update language preference
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - languageCode
              properties:
                languageCode:
                  type: string
      responses:
        '200':
          description: Language preference updated successfully
  /settings/region:
    put:
      summary: Update region preference
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - regionCode
              properties:
                regionCode:
                  type: string
      responses:
        '200':
          description: Region preference updated successfully
  /settings:
    get:
      summary: Get user settings
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User settings
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSettings'
    put:
      summary: Update user settings
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSettings'
      responses:
        '200':
          description: User settings updated successfully
  /notifications:
    post:
      summary: Send a notification
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
                - message
              properties:
                userId:
                  type: string
                message:
                  type: string
      responses:
        '200':
          description: Notification sent successfully
    get:
      summary: Get notifications
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: List of notifications
          content:
            application/json:
              schema:
                type: object
                properties:
                  notifications:
                    type: array
                    items:
                      $ref: '#/components/schemas/Notification'
                  totalCount:
                    type: integer
                  currentPage:
                    type: integer
                  totalPages:
                    type: integer
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    NewUser:
      type: object
      required:
        - name
        - email
        - password
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          format: password
    LoginCredentials:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
    User:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        email:
          type: string
          format: email
    UserResponse:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        token:
          type: string
    Organization:
      type: object
      required:
        - name
      properties:
        id:
          type: string
        name:
          type: string
    ActivityLog:
      type: object
      properties:
        id:
          type: string
        userId:
          type: string
        action:
          type: string
        timestamp:
          type: string
          format: date-time
    UserSettings:
      type: object
      properties:
        languageCode:
          type: string
        regionCode:
          type: string
    Notification:
      type: object
      properties:
        id:
          type: string
        userId:
          type: string
        message:
          type: string
        timestamp:
          type: string
          format: date-time
    PaymentRequest:
      type: object
      required:
        - amount
        - currency
        - method
      properties:
        amount:
          type: number
        currency:
          type: string
        method:
          type: string
          enum: [credit_card, paypal, bank_transfer]
        description:
          type: string
    Payment:
      type: object
      properties:
        id:
          type: string
        amount:
          type: number
        currency:
          type: string
        method:
          type: string
        status:
          type: string
          enum: [pending, completed, failed]
        createdAt:
          type: string
          format: date-time
    TextAnalysisResult:
      type: object
      properties:
        sentiment:
          type: string
          enum: [positive, neutral, negative]
        entities:
          type: array
          items:
            type: object
            properties:
              text:
                type: string
              type:
                type: string
        keywords:
          type: array
          items:
            type: string
    securitySchemes:
      BearerAuth:
        type: http
        scheme: bearer
        bearerFormat: JWT